// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TelemetryData.proto

#ifndef PROTOBUF_INCLUDED_TelemetryData_2eproto
#define PROTOBUF_INCLUDED_TelemetryData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TelemetryData_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_TelemetryData_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_TelemetryData_2eproto();
class TelemetryData;
class TelemetryDataDefaultTypeInternal;
extern TelemetryDataDefaultTypeInternal _TelemetryData_default_instance_;
namespace google {
namespace protobuf {
template<> ::TelemetryData* Arena::CreateMaybeMessage<::TelemetryData>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class TelemetryData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TelemetryData) */ {
 public:
  TelemetryData();
  virtual ~TelemetryData();

  TelemetryData(const TelemetryData& from);

  inline TelemetryData& operator=(const TelemetryData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TelemetryData(TelemetryData&& from) noexcept
    : TelemetryData() {
    *this = ::std::move(from);
  }

  inline TelemetryData& operator=(TelemetryData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TelemetryData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TelemetryData* internal_default_instance() {
    return reinterpret_cast<const TelemetryData*>(
               &_TelemetryData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TelemetryData* other);
  friend void swap(TelemetryData& a, TelemetryData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TelemetryData* New() const final {
    return CreateMaybeMessage<TelemetryData>(nullptr);
  }

  TelemetryData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TelemetryData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TelemetryData& from);
  void MergeFrom(const TelemetryData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TelemetryData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string mission_time = 3;
  void clear_mission_time();
  static const int kMissionTimeFieldNumber = 3;
  const ::std::string& mission_time() const;
  void set_mission_time(const ::std::string& value);
  #if LANG_CXX11
  void set_mission_time(::std::string&& value);
  #endif
  void set_mission_time(const char* value);
  void set_mission_time(const char* value, size_t size);
  ::std::string* mutable_mission_time();
  ::std::string* release_mission_time();
  void set_allocated_mission_time(::std::string* mission_time);

  // string status = 12;
  void clear_status();
  static const int kStatusFieldNumber = 12;
  const ::std::string& status() const;
  void set_status(const ::std::string& value);
  #if LANG_CXX11
  void set_status(::std::string&& value);
  #endif
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  ::std::string* mutable_status();
  ::std::string* release_status();
  void set_allocated_status(::std::string* status);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 packet_number = 2;
  void clear_packet_number();
  static const int kPacketNumberFieldNumber = 2;
  ::google::protobuf::int32 packet_number() const;
  void set_packet_number(::google::protobuf::int32 value);

  // double pressure = 4;
  void clear_pressure();
  static const int kPressureFieldNumber = 4;
  double pressure() const;
  void set_pressure(double value);

  // double altitude = 5;
  void clear_altitude();
  static const int kAltitudeFieldNumber = 5;
  double altitude() const;
  void set_altitude(double value);

  // double descent_rate = 6;
  void clear_descent_rate();
  static const int kDescentRateFieldNumber = 6;
  double descent_rate() const;
  void set_descent_rate(double value);

  // int32 temp = 7;
  void clear_temp();
  static const int kTempFieldNumber = 7;
  ::google::protobuf::int32 temp() const;
  void set_temp(::google::protobuf::int32 value);

  // int32 voltage_level = 8;
  void clear_voltage_level();
  static const int kVoltageLevelFieldNumber = 8;
  ::google::protobuf::int32 voltage_level() const;
  void set_voltage_level(::google::protobuf::int32 value);

  // double gps_latitude = 9;
  void clear_gps_latitude();
  static const int kGpsLatitudeFieldNumber = 9;
  double gps_latitude() const;
  void set_gps_latitude(double value);

  // double gps_longtitude = 10;
  void clear_gps_longtitude();
  static const int kGpsLongtitudeFieldNumber = 10;
  double gps_longtitude() const;
  void set_gps_longtitude(double value);

  // double gps_altitude = 11;
  void clear_gps_altitude();
  static const int kGpsAltitudeFieldNumber = 11;
  double gps_altitude() const;
  void set_gps_altitude(double value);

  // double pitch = 13;
  void clear_pitch();
  static const int kPitchFieldNumber = 13;
  double pitch() const;
  void set_pitch(double value);

  // double roll = 14;
  void clear_roll();
  static const int kRollFieldNumber = 14;
  double roll() const;
  void set_roll(double value);

  // double yaw = 15;
  void clear_yaw();
  static const int kYawFieldNumber = 15;
  double yaw() const;
  void set_yaw(double value);

  // int32 spin_rate = 16;
  void clear_spin_rate();
  static const int kSpinRateFieldNumber = 16;
  ::google::protobuf::int32 spin_rate() const;
  void set_spin_rate(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TelemetryData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr mission_time_;
  ::google::protobuf::internal::ArenaStringPtr status_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 packet_number_;
  double pressure_;
  double altitude_;
  double descent_rate_;
  ::google::protobuf::int32 temp_;
  ::google::protobuf::int32 voltage_level_;
  double gps_latitude_;
  double gps_longtitude_;
  double gps_altitude_;
  double pitch_;
  double roll_;
  double yaw_;
  ::google::protobuf::int32 spin_rate_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TelemetryData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TelemetryData

// int32 id = 1;
inline void TelemetryData::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 TelemetryData::id() const {
  // @@protoc_insertion_point(field_get:TelemetryData.id)
  return id_;
}
inline void TelemetryData::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:TelemetryData.id)
}

// int32 packet_number = 2;
inline void TelemetryData::clear_packet_number() {
  packet_number_ = 0;
}
inline ::google::protobuf::int32 TelemetryData::packet_number() const {
  // @@protoc_insertion_point(field_get:TelemetryData.packet_number)
  return packet_number_;
}
inline void TelemetryData::set_packet_number(::google::protobuf::int32 value) {
  
  packet_number_ = value;
  // @@protoc_insertion_point(field_set:TelemetryData.packet_number)
}

// string mission_time = 3;
inline void TelemetryData::clear_mission_time() {
  mission_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TelemetryData::mission_time() const {
  // @@protoc_insertion_point(field_get:TelemetryData.mission_time)
  return mission_time_.GetNoArena();
}
inline void TelemetryData::set_mission_time(const ::std::string& value) {
  
  mission_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TelemetryData.mission_time)
}
#if LANG_CXX11
inline void TelemetryData::set_mission_time(::std::string&& value) {
  
  mission_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TelemetryData.mission_time)
}
#endif
inline void TelemetryData::set_mission_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mission_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TelemetryData.mission_time)
}
inline void TelemetryData::set_mission_time(const char* value, size_t size) {
  
  mission_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TelemetryData.mission_time)
}
inline ::std::string* TelemetryData::mutable_mission_time() {
  
  // @@protoc_insertion_point(field_mutable:TelemetryData.mission_time)
  return mission_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TelemetryData::release_mission_time() {
  // @@protoc_insertion_point(field_release:TelemetryData.mission_time)
  
  return mission_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TelemetryData::set_allocated_mission_time(::std::string* mission_time) {
  if (mission_time != nullptr) {
    
  } else {
    
  }
  mission_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mission_time);
  // @@protoc_insertion_point(field_set_allocated:TelemetryData.mission_time)
}

// double pressure = 4;
inline void TelemetryData::clear_pressure() {
  pressure_ = 0;
}
inline double TelemetryData::pressure() const {
  // @@protoc_insertion_point(field_get:TelemetryData.pressure)
  return pressure_;
}
inline void TelemetryData::set_pressure(double value) {
  
  pressure_ = value;
  // @@protoc_insertion_point(field_set:TelemetryData.pressure)
}

// double altitude = 5;
inline void TelemetryData::clear_altitude() {
  altitude_ = 0;
}
inline double TelemetryData::altitude() const {
  // @@protoc_insertion_point(field_get:TelemetryData.altitude)
  return altitude_;
}
inline void TelemetryData::set_altitude(double value) {
  
  altitude_ = value;
  // @@protoc_insertion_point(field_set:TelemetryData.altitude)
}

// double descent_rate = 6;
inline void TelemetryData::clear_descent_rate() {
  descent_rate_ = 0;
}
inline double TelemetryData::descent_rate() const {
  // @@protoc_insertion_point(field_get:TelemetryData.descent_rate)
  return descent_rate_;
}
inline void TelemetryData::set_descent_rate(double value) {
  
  descent_rate_ = value;
  // @@protoc_insertion_point(field_set:TelemetryData.descent_rate)
}

// int32 temp = 7;
inline void TelemetryData::clear_temp() {
  temp_ = 0;
}
inline ::google::protobuf::int32 TelemetryData::temp() const {
  // @@protoc_insertion_point(field_get:TelemetryData.temp)
  return temp_;
}
inline void TelemetryData::set_temp(::google::protobuf::int32 value) {
  
  temp_ = value;
  // @@protoc_insertion_point(field_set:TelemetryData.temp)
}

// int32 voltage_level = 8;
inline void TelemetryData::clear_voltage_level() {
  voltage_level_ = 0;
}
inline ::google::protobuf::int32 TelemetryData::voltage_level() const {
  // @@protoc_insertion_point(field_get:TelemetryData.voltage_level)
  return voltage_level_;
}
inline void TelemetryData::set_voltage_level(::google::protobuf::int32 value) {
  
  voltage_level_ = value;
  // @@protoc_insertion_point(field_set:TelemetryData.voltage_level)
}

// double gps_latitude = 9;
inline void TelemetryData::clear_gps_latitude() {
  gps_latitude_ = 0;
}
inline double TelemetryData::gps_latitude() const {
  // @@protoc_insertion_point(field_get:TelemetryData.gps_latitude)
  return gps_latitude_;
}
inline void TelemetryData::set_gps_latitude(double value) {
  
  gps_latitude_ = value;
  // @@protoc_insertion_point(field_set:TelemetryData.gps_latitude)
}

// double gps_longtitude = 10;
inline void TelemetryData::clear_gps_longtitude() {
  gps_longtitude_ = 0;
}
inline double TelemetryData::gps_longtitude() const {
  // @@protoc_insertion_point(field_get:TelemetryData.gps_longtitude)
  return gps_longtitude_;
}
inline void TelemetryData::set_gps_longtitude(double value) {
  
  gps_longtitude_ = value;
  // @@protoc_insertion_point(field_set:TelemetryData.gps_longtitude)
}

// double gps_altitude = 11;
inline void TelemetryData::clear_gps_altitude() {
  gps_altitude_ = 0;
}
inline double TelemetryData::gps_altitude() const {
  // @@protoc_insertion_point(field_get:TelemetryData.gps_altitude)
  return gps_altitude_;
}
inline void TelemetryData::set_gps_altitude(double value) {
  
  gps_altitude_ = value;
  // @@protoc_insertion_point(field_set:TelemetryData.gps_altitude)
}

// string status = 12;
inline void TelemetryData::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TelemetryData::status() const {
  // @@protoc_insertion_point(field_get:TelemetryData.status)
  return status_.GetNoArena();
}
inline void TelemetryData::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TelemetryData.status)
}
#if LANG_CXX11
inline void TelemetryData::set_status(::std::string&& value) {
  
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TelemetryData.status)
}
#endif
inline void TelemetryData::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TelemetryData.status)
}
inline void TelemetryData::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TelemetryData.status)
}
inline ::std::string* TelemetryData::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:TelemetryData.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TelemetryData::release_status() {
  // @@protoc_insertion_point(field_release:TelemetryData.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TelemetryData::set_allocated_status(::std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:TelemetryData.status)
}

// double pitch = 13;
inline void TelemetryData::clear_pitch() {
  pitch_ = 0;
}
inline double TelemetryData::pitch() const {
  // @@protoc_insertion_point(field_get:TelemetryData.pitch)
  return pitch_;
}
inline void TelemetryData::set_pitch(double value) {
  
  pitch_ = value;
  // @@protoc_insertion_point(field_set:TelemetryData.pitch)
}

// double roll = 14;
inline void TelemetryData::clear_roll() {
  roll_ = 0;
}
inline double TelemetryData::roll() const {
  // @@protoc_insertion_point(field_get:TelemetryData.roll)
  return roll_;
}
inline void TelemetryData::set_roll(double value) {
  
  roll_ = value;
  // @@protoc_insertion_point(field_set:TelemetryData.roll)
}

// double yaw = 15;
inline void TelemetryData::clear_yaw() {
  yaw_ = 0;
}
inline double TelemetryData::yaw() const {
  // @@protoc_insertion_point(field_get:TelemetryData.yaw)
  return yaw_;
}
inline void TelemetryData::set_yaw(double value) {
  
  yaw_ = value;
  // @@protoc_insertion_point(field_set:TelemetryData.yaw)
}

// int32 spin_rate = 16;
inline void TelemetryData::clear_spin_rate() {
  spin_rate_ = 0;
}
inline ::google::protobuf::int32 TelemetryData::spin_rate() const {
  // @@protoc_insertion_point(field_get:TelemetryData.spin_rate)
  return spin_rate_;
}
inline void TelemetryData::set_spin_rate(::google::protobuf::int32 value) {
  
  spin_rate_ = value;
  // @@protoc_insertion_point(field_set:TelemetryData.spin_rate)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_TelemetryData_2eproto
