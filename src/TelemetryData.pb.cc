// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TelemetryData.proto

#include "TelemetryData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

class TelemetryDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TelemetryData> _instance;
} _TelemetryData_default_instance_;
static void InitDefaultsTelemetryData_TelemetryData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TelemetryData_default_instance_;
    new (ptr) ::TelemetryData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TelemetryData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TelemetryData_TelemetryData_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTelemetryData_TelemetryData_2eproto}, {}};

void InitDefaults_TelemetryData_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_TelemetryData_TelemetryData_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_TelemetryData_2eproto[1];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_TelemetryData_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_TelemetryData_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_TelemetryData_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TelemetryData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TelemetryData, id_),
  PROTOBUF_FIELD_OFFSET(::TelemetryData, packet_number_),
  PROTOBUF_FIELD_OFFSET(::TelemetryData, mission_time_),
  PROTOBUF_FIELD_OFFSET(::TelemetryData, pressure_),
  PROTOBUF_FIELD_OFFSET(::TelemetryData, altitude_),
  PROTOBUF_FIELD_OFFSET(::TelemetryData, descent_rate_),
  PROTOBUF_FIELD_OFFSET(::TelemetryData, temp_),
  PROTOBUF_FIELD_OFFSET(::TelemetryData, voltage_level_),
  PROTOBUF_FIELD_OFFSET(::TelemetryData, gps_latitude_),
  PROTOBUF_FIELD_OFFSET(::TelemetryData, gps_longtitude_),
  PROTOBUF_FIELD_OFFSET(::TelemetryData, gps_altitude_),
  PROTOBUF_FIELD_OFFSET(::TelemetryData, status_),
  PROTOBUF_FIELD_OFFSET(::TelemetryData, pitch_),
  PROTOBUF_FIELD_OFFSET(::TelemetryData, roll_),
  PROTOBUF_FIELD_OFFSET(::TelemetryData, yaw_),
  PROTOBUF_FIELD_OFFSET(::TelemetryData, spin_rate_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::TelemetryData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TelemetryData_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_TelemetryData_2eproto = {
  {}, AddDescriptors_TelemetryData_2eproto, "TelemetryData.proto", schemas,
  file_default_instances, TableStruct_TelemetryData_2eproto::offsets,
  file_level_metadata_TelemetryData_2eproto, 1, file_level_enum_descriptors_TelemetryData_2eproto, file_level_service_descriptors_TelemetryData_2eproto,
};

const char descriptor_table_protodef_TelemetryData_2eproto[] =
  "\n\023TelemetryData.proto\"\270\002\n\rTelemetryData\022"
  "\n\n\002id\030\001 \001(\005\022\025\n\rpacket_number\030\002 \001(\005\022\024\n\014mi"
  "ssion_time\030\003 \001(\t\022\020\n\010pressure\030\004 \001(\001\022\020\n\010al"
  "titude\030\005 \001(\001\022\024\n\014descent_rate\030\006 \001(\001\022\014\n\004te"
  "mp\030\007 \001(\005\022\025\n\rvoltage_level\030\010 \001(\005\022\024\n\014gps_l"
  "atitude\030\t \001(\001\022\026\n\016gps_longtitude\030\n \001(\001\022\024\n"
  "\014gps_altitude\030\013 \001(\001\022\016\n\006status\030\014 \001(\t\022\r\n\005p"
  "itch\030\r \001(\001\022\014\n\004roll\030\016 \001(\001\022\013\n\003yaw\030\017 \001(\001\022\021\n"
  "\tspin_rate\030\020 \001(\005b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_TelemetryData_2eproto = {
  false, InitDefaults_TelemetryData_2eproto, 
  descriptor_table_protodef_TelemetryData_2eproto,
  "TelemetryData.proto", &assign_descriptors_table_TelemetryData_2eproto, 344,
};

void AddDescriptors_TelemetryData_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_TelemetryData_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_TelemetryData_2eproto = []() { AddDescriptors_TelemetryData_2eproto(); return true; }();

// ===================================================================

void TelemetryData::InitAsDefaultInstance() {
}
class TelemetryData::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TelemetryData::kIdFieldNumber;
const int TelemetryData::kPacketNumberFieldNumber;
const int TelemetryData::kMissionTimeFieldNumber;
const int TelemetryData::kPressureFieldNumber;
const int TelemetryData::kAltitudeFieldNumber;
const int TelemetryData::kDescentRateFieldNumber;
const int TelemetryData::kTempFieldNumber;
const int TelemetryData::kVoltageLevelFieldNumber;
const int TelemetryData::kGpsLatitudeFieldNumber;
const int TelemetryData::kGpsLongtitudeFieldNumber;
const int TelemetryData::kGpsAltitudeFieldNumber;
const int TelemetryData::kStatusFieldNumber;
const int TelemetryData::kPitchFieldNumber;
const int TelemetryData::kRollFieldNumber;
const int TelemetryData::kYawFieldNumber;
const int TelemetryData::kSpinRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TelemetryData::TelemetryData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TelemetryData)
}
TelemetryData::TelemetryData(const TelemetryData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mission_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mission_time().size() > 0) {
    mission_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mission_time_);
  }
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.status().size() > 0) {
    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&spin_rate_) -
    reinterpret_cast<char*>(&id_)) + sizeof(spin_rate_));
  // @@protoc_insertion_point(copy_constructor:TelemetryData)
}

void TelemetryData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TelemetryData_TelemetryData_2eproto.base);
  mission_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&spin_rate_) -
      reinterpret_cast<char*>(&id_)) + sizeof(spin_rate_));
}

TelemetryData::~TelemetryData() {
  // @@protoc_insertion_point(destructor:TelemetryData)
  SharedDtor();
}

void TelemetryData::SharedDtor() {
  mission_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TelemetryData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TelemetryData& TelemetryData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TelemetryData_TelemetryData_2eproto.base);
  return *internal_default_instance();
}


void TelemetryData::Clear() {
// @@protoc_insertion_point(message_clear_start:TelemetryData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mission_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&spin_rate_) -
      reinterpret_cast<char*>(&id_)) + sizeof(spin_rate_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TelemetryData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TelemetryData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 packet_number = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_packet_number(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string mission_time = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TelemetryData.mission_time");
        object = msg->mutable_mission_time();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // double pressure = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_pressure(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double altitude = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_altitude(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double descent_rate = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 49) goto handle_unusual;
        msg->set_descent_rate(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // int32 temp = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_temp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 voltage_level = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_voltage_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double gps_latitude = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 73) goto handle_unusual;
        msg->set_gps_latitude(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double gps_longtitude = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 81) goto handle_unusual;
        msg->set_gps_longtitude(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double gps_altitude = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 89) goto handle_unusual;
        msg->set_gps_altitude(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // string status = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("TelemetryData.status");
        object = msg->mutable_status();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // double pitch = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 105) goto handle_unusual;
        msg->set_pitch(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double roll = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 113) goto handle_unusual;
        msg->set_roll(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double yaw = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 121) goto handle_unusual;
        msg->set_yaw(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // int32 spin_rate = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_spin_rate(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TelemetryData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TelemetryData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 packet_number = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packet_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mission_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mission_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mission_time().data(), static_cast<int>(this->mission_time().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TelemetryData.mission_time"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pressure = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pressure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double altitude = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double descent_rate = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (49 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &descent_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 temp = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &temp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 voltage_level = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &voltage_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double gps_latitude = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (73 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gps_latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double gps_longtitude = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (81 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gps_longtitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double gps_altitude = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (89 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gps_altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string status = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->status().data(), static_cast<int>(this->status().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TelemetryData.status"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pitch = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (105 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double roll = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (113 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &roll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double yaw = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (121 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 spin_rate = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spin_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TelemetryData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TelemetryData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TelemetryData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TelemetryData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // int32 packet_number = 2;
  if (this->packet_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->packet_number(), output);
  }

  // string mission_time = 3;
  if (this->mission_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mission_time().data(), static_cast<int>(this->mission_time().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TelemetryData.mission_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->mission_time(), output);
  }

  // double pressure = 4;
  if (this->pressure() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->pressure(), output);
  }

  // double altitude = 5;
  if (this->altitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->altitude(), output);
  }

  // double descent_rate = 6;
  if (this->descent_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->descent_rate(), output);
  }

  // int32 temp = 7;
  if (this->temp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->temp(), output);
  }

  // int32 voltage_level = 8;
  if (this->voltage_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->voltage_level(), output);
  }

  // double gps_latitude = 9;
  if (this->gps_latitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->gps_latitude(), output);
  }

  // double gps_longtitude = 10;
  if (this->gps_longtitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->gps_longtitude(), output);
  }

  // double gps_altitude = 11;
  if (this->gps_altitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->gps_altitude(), output);
  }

  // string status = 12;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), static_cast<int>(this->status().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TelemetryData.status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->status(), output);
  }

  // double pitch = 13;
  if (this->pitch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->pitch(), output);
  }

  // double roll = 14;
  if (this->roll() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->roll(), output);
  }

  // double yaw = 15;
  if (this->yaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->yaw(), output);
  }

  // int32 spin_rate = 16;
  if (this->spin_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->spin_rate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TelemetryData)
}

::google::protobuf::uint8* TelemetryData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TelemetryData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // int32 packet_number = 2;
  if (this->packet_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->packet_number(), target);
  }

  // string mission_time = 3;
  if (this->mission_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mission_time().data(), static_cast<int>(this->mission_time().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TelemetryData.mission_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mission_time(), target);
  }

  // double pressure = 4;
  if (this->pressure() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->pressure(), target);
  }

  // double altitude = 5;
  if (this->altitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->altitude(), target);
  }

  // double descent_rate = 6;
  if (this->descent_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->descent_rate(), target);
  }

  // int32 temp = 7;
  if (this->temp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->temp(), target);
  }

  // int32 voltage_level = 8;
  if (this->voltage_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->voltage_level(), target);
  }

  // double gps_latitude = 9;
  if (this->gps_latitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->gps_latitude(), target);
  }

  // double gps_longtitude = 10;
  if (this->gps_longtitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->gps_longtitude(), target);
  }

  // double gps_altitude = 11;
  if (this->gps_altitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->gps_altitude(), target);
  }

  // string status = 12;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), static_cast<int>(this->status().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TelemetryData.status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->status(), target);
  }

  // double pitch = 13;
  if (this->pitch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->pitch(), target);
  }

  // double roll = 14;
  if (this->roll() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->roll(), target);
  }

  // double yaw = 15;
  if (this->yaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->yaw(), target);
  }

  // int32 spin_rate = 16;
  if (this->spin_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->spin_rate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TelemetryData)
  return target;
}

size_t TelemetryData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TelemetryData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mission_time = 3;
  if (this->mission_time().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mission_time());
  }

  // string status = 12;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 packet_number = 2;
  if (this->packet_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->packet_number());
  }

  // double pressure = 4;
  if (this->pressure() != 0) {
    total_size += 1 + 8;
  }

  // double altitude = 5;
  if (this->altitude() != 0) {
    total_size += 1 + 8;
  }

  // double descent_rate = 6;
  if (this->descent_rate() != 0) {
    total_size += 1 + 8;
  }

  // int32 temp = 7;
  if (this->temp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->temp());
  }

  // int32 voltage_level = 8;
  if (this->voltage_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->voltage_level());
  }

  // double gps_latitude = 9;
  if (this->gps_latitude() != 0) {
    total_size += 1 + 8;
  }

  // double gps_longtitude = 10;
  if (this->gps_longtitude() != 0) {
    total_size += 1 + 8;
  }

  // double gps_altitude = 11;
  if (this->gps_altitude() != 0) {
    total_size += 1 + 8;
  }

  // double pitch = 13;
  if (this->pitch() != 0) {
    total_size += 1 + 8;
  }

  // double roll = 14;
  if (this->roll() != 0) {
    total_size += 1 + 8;
  }

  // double yaw = 15;
  if (this->yaw() != 0) {
    total_size += 1 + 8;
  }

  // int32 spin_rate = 16;
  if (this->spin_rate() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->spin_rate());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TelemetryData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TelemetryData)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetryData* source =
      ::google::protobuf::DynamicCastToGenerated<TelemetryData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TelemetryData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TelemetryData)
    MergeFrom(*source);
  }
}

void TelemetryData::MergeFrom(const TelemetryData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TelemetryData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mission_time().size() > 0) {

    mission_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mission_time_);
  }
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.packet_number() != 0) {
    set_packet_number(from.packet_number());
  }
  if (from.pressure() != 0) {
    set_pressure(from.pressure());
  }
  if (from.altitude() != 0) {
    set_altitude(from.altitude());
  }
  if (from.descent_rate() != 0) {
    set_descent_rate(from.descent_rate());
  }
  if (from.temp() != 0) {
    set_temp(from.temp());
  }
  if (from.voltage_level() != 0) {
    set_voltage_level(from.voltage_level());
  }
  if (from.gps_latitude() != 0) {
    set_gps_latitude(from.gps_latitude());
  }
  if (from.gps_longtitude() != 0) {
    set_gps_longtitude(from.gps_longtitude());
  }
  if (from.gps_altitude() != 0) {
    set_gps_altitude(from.gps_altitude());
  }
  if (from.pitch() != 0) {
    set_pitch(from.pitch());
  }
  if (from.roll() != 0) {
    set_roll(from.roll());
  }
  if (from.yaw() != 0) {
    set_yaw(from.yaw());
  }
  if (from.spin_rate() != 0) {
    set_spin_rate(from.spin_rate());
  }
}

void TelemetryData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TelemetryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetryData::CopyFrom(const TelemetryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TelemetryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetryData::IsInitialized() const {
  return true;
}

void TelemetryData::Swap(TelemetryData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetryData::InternalSwap(TelemetryData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  mission_time_.Swap(&other->mission_time_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  status_.Swap(&other->status_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(packet_number_, other->packet_number_);
  swap(pressure_, other->pressure_);
  swap(altitude_, other->altitude_);
  swap(descent_rate_, other->descent_rate_);
  swap(temp_, other->temp_);
  swap(voltage_level_, other->voltage_level_);
  swap(gps_latitude_, other->gps_latitude_);
  swap(gps_longtitude_, other->gps_longtitude_);
  swap(gps_altitude_, other->gps_altitude_);
  swap(pitch_, other->pitch_);
  swap(roll_, other->roll_);
  swap(yaw_, other->yaw_);
  swap(spin_rate_, other->spin_rate_);
}

::google::protobuf::Metadata TelemetryData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_TelemetryData_2eproto);
  return ::file_level_metadata_TelemetryData_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::TelemetryData* Arena::CreateMaybeMessage< ::TelemetryData >(Arena* arena) {
  return Arena::CreateInternal< ::TelemetryData >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
